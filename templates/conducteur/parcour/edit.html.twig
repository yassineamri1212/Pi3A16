{% extends 'conducteur/base.html.twig' %} {# Use Conducteur base #}

{% block conducteur_title %}Edit Parcour{% endblock %} {# Use Conducteur block #}

{% block conducteur_content %} {# Use Conducteur block #}
    <div class="container-fluid">
        {# === UPDATED Page Title === #}
        <h1 class="h3 mb-4">Edit Parcour: {{ parcour.name|default(parcour.pickup ~ ' to ' ~ parcour.destination)|truncate(50) }}</h1>

        <div class="card shadow">
            <div class="card-body">
                {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

                {# === ADDED Map Placeholder === #}
                <div class="mb-3">
                    <label class="form-label">Adjust Pickup & Destination on Map:</label>
                    <div id="map-status" class="alert alert-info small p-2" role="alert">
                        Map loaded. Drag markers to adjust points.
                    </div>
                    <div id="map-picker" style="height: 400px; width: 100%; border: 1px solid #ccc; border-radius: 4px; background-color: #f8f9fa; cursor: grab;">
                        <p class="text-center text-muted p-5" id="map-loading-text">Loading map...</p>
                    </div>
                </div>
                {# === END Map Placeholder === #}

                {{ form_widget(form) }} {# Render all fields #}

                <div class="mt-4 d-flex justify-content-between align-items-center">
                    <div>
                        <button class="btn btn-primary">
                            <i class="fas fa-save"></i> {{ button_label|default('Update Parcour') }}
                        </button>
                        {# Use CONDUCTEUR index route #}
                        <a href="{{ path('app_conducteur_parcour_index') }}" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to list
                        </a>
                    </div>
                    {# Use CONDUCTEUR delete form partial #}
                    {{ include('conducteur/parcour/_delete_form.html.twig', { 'parcour': parcour, 'button_label': 'Delete', 'button_class': 'btn btn-danger' }) }}
                </div>

                {{ form_end(form) }}
            </div> {# End card-body #}
        </div> {# End card #}

    </div> {# End container-fluid #}
{% endblock %} {# === End of conducteur_content block === #}


{# === JavaScript block (Same JS as Admin edit.html.twig, targets form field IDs) === #}
{% block javascripts %}
    {# Include parent block's JS (important!) #}
    {{ parent() }}

    {# --- Leaflet Library via CDN (Ensure internet access & included in conducteur/base.html.twig or here) --- #}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {# --- End Leaflet Library --- #}

    {# --- Map Initialization & Interaction Script for EDIT --- #}
    <script>
        // --- PASTE THE ENTIRE <script> block from Admin's parcour/edit.html.twig here ---
        // It needs slight modifications to load existing marker positions.
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded. Initializing map (CONDUCTEUR EDIT)...'); // Added context
            const mapContainer = document.getElementById('map-picker');
            const mapLoadingText = document.getElementById('map-loading-text');
            const mapStatus = document.getElementById('map-status');

            // Get form input fields
            const latPickupInput = document.getElementById('{{ form.latitudePickup.vars.id }}');
            const lngPickupInput = document.getElementById('{{ form.longitudePickup.vars.id }}');
            const latDestInput = document.getElementById('{{ form.latitudeDestination.vars.id }}');
            const lngDestInput = document.getElementById('{{ form.longitudeDestination.vars.id }}');
            const distanceInput = document.getElementById('{{ form.distance.vars.id }}');
            const timeInput = document.getElementById('{{ form.time.vars.id }}');
            const pickupAddressInput = document.getElementById('{{ form.pickup.vars.id }}');
            const destinationAddressInput = document.getElementById('{{ form.destination.vars.id }}');

            // --- Initial Coordinates from Form (if they exist) ---
            const initialLatPickup = parseFloat(latPickupInput.value) || null;
            const initialLngPickup = parseFloat(lngPickupInput.value) || null;
            const initialLatDest = parseFloat(latDestInput.value) || null;
            const initialLngDest = parseFloat(lngDestInput.value) || null;

            // --- Default map center (Tunis) ---
            let mapCenterLat = 36.8065;
            let mapCenterLng = 10.1815;
            let initialZoom = 8; // Zoom out a bit more initially

            // If we have at least one coordinate, center the map better
            if (initialLatPickup && initialLngPickup) {
                mapCenterLat = initialLatPickup;
                mapCenterLng = initialLngPickup;
                initialZoom = 12; // Zoom in closer if we have a point
            } else if (initialLatDest && initialLngDest) {
                mapCenterLat = initialLatDest;
                mapCenterLng = initialLngDest;
                initialZoom = 12;
            }

            // Check if Leaflet library (L object) is loaded and the container div exists
            if (mapContainer && typeof L !== 'undefined') {
                try {
                    if(mapLoadingText) { mapLoadingText.remove(); }

                    const map = L.map('map-picker').setView([mapCenterLat, mapCenterLng], initialZoom);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19, attribution: 'Â© <a href="https://www.openstreetmap.org/copyright">OSM</a> contributors' }).addTo(map);
                    console.log('Leaflet map displayed successfully (CONDUCTEUR EDIT).');

                    let pickupMarker = null;
                    let destinationMarker = null;

                    function updateStatus(message, type = 'info') { if (mapStatus) { mapStatus.textContent = message; mapStatus.className = `alert alert-${type} small p-2`; } }
                    function updateCoordinateFields() { /* ... (Same as NEW) ... */
                        if (pickupMarker && latPickupInput && lngPickupInput) { const c = pickupMarker.getLatLng(); latPickupInput.value = c.lat.toFixed(7); lngPickupInput.value = c.lng.toFixed(7); } else if (latPickupInput && lngPickupInput) { latPickupInput.value = ''; lngPickupInput.value = ''; } if (destinationMarker && latDestInput && lngDestInput) { const c = destinationMarker.getLatLng(); latDestInput.value = c.lat.toFixed(7); lngDestInput.value = c.lng.toFixed(7); } else if (latDestInput && lngDestInput) { latDestInput.value = ''; lngDestInput.value = ''; }
                    }
                    async function reverseGeocodeAndUpdateInput(lat, lon, inputElement) { /* ... (Same as NEW) ... */
                        if (!inputElement) return; const apiUrl = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`; console.log(`Req reverse geocode: ${apiUrl}`); const origPh = inputElement.placeholder; inputElement.placeholder = 'Fetching address...'; try { const resp = await fetch(apiUrl, { headers: { 'Accept': 'application/json' } }); if (!resp.ok) throw new Error(`Nominatim failed: ${resp.status}`); const data = await resp.json(); if (data && data.display_name) { inputElement.value = data.display_name; } else { throw new Error('Address not found.'); } inputElement.placeholder = origPh; } catch (error) { console.error("Reverse geocode error:", error); inputElement.placeholder = 'Could not fetch address'; }
                    }
                    async function calculateRouteAndUpdateForm() { /* ... (Same as NEW) ... */
                        if (!pickupMarker || !destinationMarker || !distanceInput || !timeInput) { if(distanceInput) distanceInput.value = ''; if(timeInput) timeInput.value = ''; return; } const pC = pickupMarker.getLatLng(); const dC = destinationMarker.getLatLng(); const coords = `${pC.lng.toFixed(7)},${pC.lat.toFixed(7)};${dC.lng.toFixed(7)},${dC.lat.toFixed(7)}`; const apiUrl = `https://router.project-osrm.org/route/v1/driving/${coords}?overview=false`; console.log("Req route:", apiUrl); updateStatus('Calculating route...', 'warning'); distanceInput.placeholder='Calc...'; timeInput.placeholder='Calc...'; try { const resp = await fetch(apiUrl); if (!resp.ok) throw new Error(`OSRM failed: ${resp.status}`); const data = await resp.json(); if (data.code === 'Ok' && data.routes && data.routes.length > 0) { const route = data.routes[0]; const distKm = (route.distance / 1000).toFixed(1); const durMin = Math.round(route.duration / 60); distanceInput.value = distKm; timeInput.value = durMin; updateStatus(`Route: ~${distKm} km, ${durMin} min. Drag markers.`, 'success'); } else { throw new Error('No route found.'); } } catch (error) { console.error("Route calc error:", error); distanceInput.value = ''; timeInput.value = ''; distanceInput.placeholder='Failed'; timeInput.placeholder='Failed'; updateStatus(`Route error: ${error.message}`, 'danger'); }
                    }

                    // --- Initialize markers from existing data ---
                    if (initialLatPickup && initialLngPickup) {
                        pickupMarker = L.marker([initialLatPickup, initialLngPickup], { draggable: true, title: "Pickup" }).addTo(map);
                        pickupMarker.on('dragend', () => { const c = pickupMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, pickupAddressInput); calculateRouteAndUpdateForm(); });
                    }
                    if (initialLatDest && initialLngDest) {
                        destinationMarker = L.marker([initialLatDest, initialLngDest], { draggable: true, title: "Destination" }).addTo(map);
                        destinationMarker.on('dragend', () => { const c = destinationMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, destinationAddressInput); calculateRouteAndUpdateForm(); });
                    }

                    // Update status based on existing markers
                    if (pickupMarker && destinationMarker) { updateStatus('Points loaded. Drag markers to adjust.', 'success'); }
                    else if (pickupMarker) { updateStatus('Pickup loaded. Click map to set Destination.', 'primary'); }
                    else { updateStatus('Click map to set Pickup point.', 'info'); }

                    // --- Map Click Logic (Slightly different for edit - mainly places missing markers) ---
                    map.on('click', function(e) {
                        const clickedLat = e.latlng.lat;
                        const clickedLng = e.latlng.lng;

                        if (!pickupMarker) { // Only place pickup if it doesn't exist
                            pickupMarker = L.marker([clickedLat, clickedLng], { draggable: true, title: "Pickup" }).addTo(map);
                            pickupMarker.on('dragend', () => { const c = pickupMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, pickupAddressInput); calculateRouteAndUpdateForm(); });
                            reverseGeocodeAndUpdateInput(clickedLat, clickedLng, pickupAddressInput);
                            updateStatus('Pickup point set. Click map again if destination is missing.', 'primary');
                        } else if (!destinationMarker) { // Only place destination if it doesn't exist
                            destinationMarker = L.marker([clickedLat, clickedLng], { draggable: true, title: "Destination" }).addTo(map);
                            destinationMarker.on('dragend', () => { const c = destinationMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, destinationAddressInput); calculateRouteAndUpdateForm(); });
                            reverseGeocodeAndUpdateInput(clickedLat, clickedLng, destinationAddressInput);
                            calculateRouteAndUpdateForm(); // Calculate route now
                        } else {
                            // Both markers exist, do nothing on click, rely on drag
                            updateStatus('Both points set. Drag markers to adjust position.', 'success');
                        }
                        updateCoordinateFields(); // Update coords on click
                    }); // End map.on('click')

                } catch (error) { console.error("Map init error (EDIT):", error); if(mapContainer){ mapContainer.innerHTML = '<p class="text-center text-danger p-5">Map init error.</p>'; } }
            } else if (!mapContainer) { console.error("#map-picker not found!");
            } else { console.error("Leaflet (L) not loaded!"); if(mapLoadingText) { mapLoadingText.remove(); } if(mapContainer){ mapContainer.innerHTML = '<p class="text-center text-danger p-5">Map library load error.</p>'; } }
        });
    </script>
    {# === End Map Initialization & Interaction Script === #}

{% endblock %} {# === End of javascripts block === #}