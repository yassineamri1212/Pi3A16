{% extends 'conducteur/base.html.twig' %} {# Use Conducteur base #}

{% block conducteur_title %}Create New Parcour{% endblock %} {# Use Conducteur block #}

{% block conducteur_content %} {# Use Conducteur block #}
    <div class="container-fluid">
        <h1 class="h3 mb-4">Create New Parcour</h1>

        <div class="card shadow">
            <div class="card-body">
                {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

                {# === Map Placeholder Div (Same as Admin) === #}
                <div class="mb-3">
                    <label class="form-label">Click on the map to set Pickup (1st click) & Destination (2nd click):</label>
                    <div id="map-status" class="alert alert-info small p-2" role="alert">
                        Click to set Pickup point.
                    </div>
                    <div id="map-picker" style="height: 400px; width: 100%; border: 1px solid #ccc; border-radius: 4px; background-color: #f8f9fa; cursor: crosshair;">
                        <p class="text-center text-muted p-5" id="map-loading-text">Loading map...</p>
                    </div>
                </div>
                {# === END Map Placeholder Div === #}


                {# Render form fields (Using shared ParcourType) #}
                {{ form_widget(form) }}

                <div class="mt-4"> {# Spacing before buttons #}
                    <button class="btn btn-success">
                        <i class="fas fa-save"></i> {{ button_label|default('Save Parcour') }}
                    </button>
                    {# Use CONDUCTEUR index route #}
                    <a href="{{ path('app_conducteur_parcour_index') }}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to list
                    </a>
                </div>

                {{ form_end(form) }}
            </div> {# End card-body #}
        </div> {# End card #}

    </div> {# End container-fluid #}
{% endblock %} {# === End of conducteur_content block === #}


{# === JavaScript block (Same JS as Admin new.html.twig, targets form field IDs) === #}
{% block javascripts %}
    {# Include parent block's JS (important!) #}
    {{ parent() }}

    {# --- Leaflet Library via CDN (Ensure internet access & included in conducteur/base.html.twig or here) --- #}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {# --- End Leaflet Library --- #}

    {# --- Map Initialization & Interaction Script --- #}
    <script>
        // --- PASTE THE ENTIRE <script> block from Admin's parcour/new.html.twig here ---
        // It gets field IDs like '{{ form.latitudePickup.vars.id }}' which are generated
        // correctly regardless of whether it's the Admin or Conducteur controller,
        // as long as they use the same ParcourType form definition.
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded. Initializing map (CONDUCTEUR NEW)...'); // Added context
            const mapContainer = document.getElementById('map-picker');
            const mapLoadingText = document.getElementById('map-loading-text');
            const mapStatus = document.getElementById('map-status');

            // --- Get references to Form Input Fields ---
            const latPickupInput = document.getElementById('{{ form.latitudePickup.vars.id }}');
            const lngPickupInput = document.getElementById('{{ form.longitudePickup.vars.id }}');
            const latDestInput = document.getElementById('{{ form.latitudeDestination.vars.id }}');
            const lngDestInput = document.getElementById('{{ form.longitudeDestination.vars.id }}');
            const distanceInput = document.getElementById('{{ form.distance.vars.id }}');
            const timeInput = document.getElementById('{{ form.time.vars.id }}');
            const pickupAddressInput = document.getElementById('{{ form.pickup.vars.id }}');
            const destinationAddressInput = document.getElementById('{{ form.destination.vars.id }}');

            if (mapContainer && typeof L !== 'undefined') {
                try {
                    if(mapLoadingText) { mapLoadingText.remove(); }
                    const initialLat = 36.8065; const initialLng = 10.1815; const initialZoom = 10;
                    const map = L.map('map-picker').setView([initialLat, initialLng], initialZoom);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19, attribution: 'Â© <a href="https://www.openstreetmap.org/copyright">OSM</a> contributors' }).addTo(map);
                    console.log('Leaflet map displayed successfully (CONDUCTEUR NEW).');
                    let pickupMarker = null; let destinationMarker = null;

                    function updateStatus(message, type = 'info') { if (mapStatus) { mapStatus.textContent = message; mapStatus.className = `alert alert-${type} small p-2`; } }
                    function updateCoordinateFields() { /* ... (Same as before) ... */
                        if (pickupMarker && latPickupInput && lngPickupInput) { const coords = pickupMarker.getLatLng(); latPickupInput.value = coords.lat.toFixed(7); lngPickupInput.value = coords.lng.toFixed(7); } else if (latPickupInput && lngPickupInput) { latPickupInput.value = ''; lngPickupInput.value = ''; } if (destinationMarker && latDestInput && lngDestInput) { const coords = destinationMarker.getLatLng(); latDestInput.value = coords.lat.toFixed(7); lngDestInput.value = coords.lng.toFixed(7); } else if (latDestInput && lngDestInput) { latDestInput.value = ''; lngDestInput.value = ''; }
                    }
                    async function reverseGeocodeAndUpdateInput(lat, lon, inputElement) { /* ... (Same as before) ... */
                        if (!inputElement) return; const apiUrl = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`; console.log(`Requesting reverse geocode: ${apiUrl}`); const originalPlaceholder = inputElement.placeholder; inputElement.placeholder = 'Fetching address...'; try { const response = await fetch(apiUrl, { headers: { 'Accept': 'application/json' } }); if (!response.ok) throw new Error(`Nominatim failed: ${response.status}`); const data = await response.json(); if (data && data.display_name) { inputElement.value = data.display_name; } else { throw new Error('Address not found.'); } inputElement.placeholder = originalPlaceholder; } catch (error) { console.error("Reverse geocoding error:", error); inputElement.placeholder = 'Could not fetch address'; }
                    }
                    async function calculateRouteAndUpdateForm() { /* ... (Same as before) ... */
                        if (!pickupMarker || !destinationMarker || !distanceInput || !timeInput) { if(distanceInput) distanceInput.value = ''; if(timeInput) timeInput.value = ''; return; } const pickupCoords = pickupMarker.getLatLng(); const destCoords = destinationMarker.getLatLng(); const coordinates = `${pickupCoords.lng.toFixed(7)},${pickupCoords.lat.toFixed(7)};${destCoords.lng.toFixed(7)},${destCoords.lat.toFixed(7)}`; const apiUrl = `https://router.project-osrm.org/route/v1/driving/${coordinates}?overview=false`; console.log("Requesting route from OSRM:", apiUrl); updateStatus('Calculating route...', 'warning'); distanceInput.placeholder = 'Calculating...'; timeInput.placeholder = 'Calculating...'; try { const response = await fetch(apiUrl); if (!response.ok) throw new Error(`OSRM failed: ${response.status}`); const data = await response.json(); if (data.code === 'Ok' && data.routes && data.routes.length > 0) { const route = data.routes[0]; const distanceKm = (route.distance / 1000).toFixed(1); const durationMin = Math.round(route.duration / 60); distanceInput.value = distanceKm; timeInput.value = durationMin; updateStatus(`Route: ~${distanceKm} km, ${durationMin} min. Drag markers.`, 'success'); } else { throw new Error('No route found.'); } } catch (error) { console.error("Route calculation error:", error); distanceInput.value = ''; timeInput.value = ''; distanceInput.placeholder = 'Calculation failed'; timeInput.placeholder = 'Calculation failed'; updateStatus(`Route error: ${error.message}`, 'danger'); }
                    }
                    map.on('click', function(e) { /* ... (Same as before) ... */
                        const clickedLat = e.latlng.lat; const clickedLng = e.latlng.lng; if (!pickupMarker) { pickupMarker = L.marker([clickedLat, clickedLng], { draggable: true, title: "Pickup" }).addTo(map); updateStatus('Pickup set. Click map for Destination.', 'primary'); pickupMarker.on('dragend', () => { const c = pickupMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, pickupAddressInput); calculateRouteAndUpdateForm(); }); reverseGeocodeAndUpdateInput(clickedLat, clickedLng, pickupAddressInput); } else if (!destinationMarker) { destinationMarker = L.marker([clickedLat, clickedLng], { draggable: true, title: "Destination" }).addTo(map); destinationMarker.on('dragend', () => { const c = destinationMarker.getLatLng(); updateCoordinateFields(); reverseGeocodeAndUpdateInput(c.lat, c.lng, destinationAddressInput); calculateRouteAndUpdateForm(); }); reverseGeocodeAndUpdateInput(clickedLat, clickedLng, destinationAddressInput); calculateRouteAndUpdateForm(); } else { updateStatus('Both points set. Drag markers to adjust.', 'success'); } updateCoordinateFields();
                    });
                } catch (error) { console.error("Map init error:", error); if(mapContainer){ mapContainer.innerHTML = '<p class="text-center text-danger p-5">Map init error.</p>'; } }
            } else if (!mapContainer) { console.error("#map-picker not found!");
            } else { console.error("Leaflet (L) not loaded!"); if(mapLoadingText) { mapLoadingText.remove(); } if(mapContainer){ mapContainer.innerHTML = '<p class="text-center text-danger p-5">Map library load error.</p>'; } }
        });
    </script>
    {# === End Map Initialization & Interaction Script === #}

{% endblock %} {# === End of javascripts block === #}