# config/services.yaml
parameters:
  # Define parameters linked to environment variables.
  # Ensure these variables exist and have values in your .env / .env.local files.
  openweather_api_key: '%env(OPENWEATHER_API_KEY)%'
  gemini_api_key: '%env(GEMINI_API_KEY)%'
  # --- ADD Parameters for Password Reset ---
  env(FRONTEND_RESET_URL): '%env(FRONTEND_RESET_URL)%' # Read from .env
  env(APP_MAILER_SENDER): '%env(APP_MAILER_SENDER)%'     # Read from .env
  env(APP_MAILER_SENDER_NAME): '%env(APP_MAILER_SENDER_NAME)%' # Read from .env
  # --- END ADD Parameters ---

services:
  # Default configuration for services in this file
  _defaults:
    autowire: true      # Enable autowiring by default.
    autoconfigure: true # Enable autoconfiguration (tags, etc.) by default.
    # bind: # REMOVED Global bind for apiKey as it's explicitly defined below
    #   string $apiKey: '%openweather_api_key%'

  # Default service loading for classes in src/
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'

  # Default configuration for controllers
  App\Controller\:
    resource: '../src/Controller/'
    tags: ['controller.service_arguments']

  # --- EXPLICIT SERVICE DEFINITIONS ---

  # Explicit configuration for WeatherService
  App\Service\WeatherService:
    arguments:
      $apiKey: '%openweather_api_key%' # Use the defined parameter

  # --- ADD Explicit definition for PasswordResetController ---
  App\Controller\Api\PasswordResetController:
    arguments:
      # Inject standard Symfony services using their IDs
      $entityManager: '@doctrine.orm.entity_manager'
      $userRepository: '@App\Repository\UserRepository'
      $mailer: '@mailer.mailer'
      $passwordHasher: '@security.user_password_hasher'
      $validator: '@validator'
      $logger: '@logger'
      # Inject parameters defined above (which read from .env)
      $appMailerSender: '%env(APP_MAILER_SENDER)%'
      $appMailerSenderName: '%env(APP_MAILER_SENDER_NAME)%'
      $frontendResetUrl: '%env(FRONTEND_RESET_URL)%'
    tags: ['controller.service_arguments'] # Required tag for controllers defined explicitly here
  # --- END ADD Definition ---

  # Your Chatbot/Gemini services likely rely on autowiring, which is fine.