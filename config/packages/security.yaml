# config/packages/security.yaml
security:
  password_hashers:
    App\Entity\User: 'auto'

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    api:
      pattern: ^/api/
      stateless: true
      # No specific authenticators yet for this firewall
      security: true # Keep security component active for access_control

    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\LoginFormAuthenticator
      user_checker: App\Security\UserChecker
      logout:
        path: app_logout
        target: app_login
      # remember_me: ...

  role_hierarchy:
    ROLE_ADMIN: [ROLE_CONDUCTEUR, ROLE_USER]
    ROLE_CONDUCTEUR: ROLE_USER

  access_control:
    # --- Publicly accessible pages handled by 'main' firewall ---
    - { path: ^/login$, roles: PUBLIC_ACCESS }
    - { path: ^/register$, roles: PUBLIC_ACCESS }
    - { path: ^/forgot-password, roles: PUBLIC_ACCESS }
    - { path: ^/reset-password, roles: PUBLIC_ACCESS }
    # - { path: ^/home$, roles: PUBLIC_ACCESS } # Uncomment if home should be public
    # - { path: ^/$, roles: PUBLIC_ACCESS } # Uncomment if root should be public

    # --- Access control for the API firewall ---
    # These rules apply specifically to requests matching the 'api' firewall pattern (^/api/)
    - { path: ^/api/password/request-reset, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/password/reset, roles: PUBLIC_ACCESS, methods: [POST] }
    # --- ADDED/MOVED Rule for Chatbot API ---
    - { path: ^/api/chatbot/message, roles: PUBLIC_ACCESS, methods: [POST] } # Allow anyone to POST here
    # --- END ADDED/MOVED Rule ---

    # Example: Secure other future API endpoints (uncomment/adjust when needed)
    # - { path: ^/api/profile, roles: IS_AUTHENTICATED_FULLY }
    # - { path: ^/api/admin, roles: ROLE_ADMIN }

    # --- Access control for the 'main' firewall ---
    - { path: ^/admin/parcour, roles: ROLE_CONDUCTEUR }
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/conducteur, roles: ROLE_CONDUCTEUR }
    - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/reserve/, roles: ROLE_USER }
    - { path: ^/my-reservations$, roles: ROLE_USER }

    # --- Catch-all for 'main' firewall ---
    # Requires login for all other pages handled by the main firewall
    - { path: ^/, roles: ROLE_USER }

# Test environment config remains the same...
when@test:
  security:
    password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4
        time_cost: 3
        memory_cost: 10